// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 1999
// Object-Oriented Concepts, Inc.
// Billerica, MA, USA
//
// Copyright (c) 1999
// Object-Oriented Concepts GmbH
// Ettlingen, Germany
//
// All Rights Reserved
//
// **********************************************************************

// Version: 3.1.2
// License: 2-5-990601-1

#ifndef __DirectorLink_h__
#define __DirectorLink_h__

//
// IDL:DirectorLink:1.0
//
class DirectorLink;
typedef DirectorLink* DirectorLink_ptr;
typedef DirectorLink* DirectorLinkRef;
void OBDuplicate(DirectorLink_ptr);
void OBRelease(DirectorLink_ptr);
typedef OBObjVar< DirectorLink > DirectorLink_var;

//
// IDL:DirectorLink:1.0
//
class DirectorLink : virtual public CORBA_Object
{
    DirectorLink(const DirectorLink&);
    void operator=(const DirectorLink&);

protected:

    DirectorLink() { }

public:

    static inline DirectorLink_ptr
    _duplicate(DirectorLink_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline DirectorLink_ptr
    _nil()
    {
        return 0;
    }

    static DirectorLink_ptr _narrow(CORBA_Object_ptr);
    virtual void* _OB_narrowHelp(const char*) const;
    virtual const char* _OB_typeId() const;

    friend void OBUnmarshal(DirectorLink_ptr&, const CORBA_Octet*&, bool);

    friend CORBA_Boolean operator>>=(const CORBA_Any&, DirectorLink_ptr&);

    //
    // IDL:DirectorLink/callY50:1.0
    //
    virtual char* callY50(const char* msg);
};

extern OBTypeCodeConst _tc_DirectorLink;

//
// IDL:DirectorLink:1.0
//
inline void
CORBA_release(DirectorLink_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline CORBA_Boolean
CORBA_is_nil(DirectorLink_ptr p)
{
    return p == 0;
}

inline void
OBMarshal(DirectorLink_ptr p, CORBA_Octet*& oct)
{
    OBMarshal((CORBA_Object_ptr)p, oct);
}

inline void
OBMarshalCount(DirectorLink_ptr p, CORBA_ULong& count)
{
    OBMarshalCount((CORBA_Object_ptr)p, count);
}

void OBUnmarshal(DirectorLink_ptr&, const CORBA_Octet*&, bool);

void operator<<=(CORBA_Any&, DirectorLink_ptr);
void operator<<=(CORBA_Any&, DirectorLink_ptr*);
CORBA_Boolean operator>>=(const CORBA_Any&, DirectorLink_ptr&);

inline void
operator<<=(CORBA_Any_var& any, DirectorLink_ptr val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA_Any_var& any, DirectorLink_ptr* val)
{
    any.inout() <<= val;
}

inline CORBA_Boolean
operator>>=(const CORBA_Any_var& any, DirectorLink_ptr& val)
{
    return any.in() >>= val;
}

#endif
